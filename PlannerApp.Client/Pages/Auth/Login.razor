@page "/auth/login"

@layout AuthLayout
@using PlannerApp.Shared.Models

@inject PlannerApp.Client.Services.AuthenticationService authService
@inject NavigationManager navigationManager
@inject ILocalStorageService storageService
@inject AuthenticationStateProvider authenticationStateProvider

<style>
    body {
        background-image: url('https://wallpaperaccess.com/full/108803.jpg');
    }
</style>

<div class="row">
    <div class="col-12">
        <h3 style="text-align:center">Login to your account</h3>
        <EditForm Model="model" OnValidSubmit="LoginUser">
            <RadzenCard>
                <AlertMessage Message="@message" MessageType="@messageType" />



                <DataAnnotationsValidator />
                <ValidationSummary />

                <label>Email</label>
                <RadzenTextBox @bind-Value="model.Email"></RadzenTextBox>

                <label>Password</label>
                <RadzenPassword @bind-Value="model.Password"></RadzenPassword>
                <p style="text-align:left;">
                    forgot password
                    <span style="float:right;">
                        change password
                    </span>
                </p>

                <RadzenButton ButtonType="Radzen.ButtonType.Submit" Text="Login"
                              ButtonStyle="Radzen.ButtonStyle.Primary" class="btn-block mr-2"
                              Disabled="isBusy" />

                <RadzenButton ButtonType="Radzen.ButtonType.Button" Text="Register"
                              ButtonStyle="Radzen.ButtonStyle.Secondary" class="btn-block mr-2"
                              Disabled="isBusy" Click="GoToRegister" />
            </RadzenCard>
        </EditForm>
    </div>
</div>

@code {
    LoginRequest model = new LoginRequest();

    bool isBusy = false;
    string message = string.Empty;
    Models.AlertMessageType messageType = Models.AlertMessageType.Success;


    public async Task LoginUser()
    {
        isBusy = true;
        var result = await authService.LoginUserAsync(model);
        if (result.IsSuccess)
        {
            message = "Welcome to PlannerApp";
            messageType = PlannerApp.Client.Models.AlertMessageType.Success;

            var userInfo = new PlannerApp.Client.Models.LocalUserInfo()
            {
                AccessToken = result.Message,
                Email = result.UserInfo["Email"],
                FirstName = result.UserInfo["FirstName"],
                LastName = result.UserInfo["LastName"],
                Id = result.UserInfo[System.Security.Claims.ClaimTypes.NameIdentifier],
            };

            await storageService.SetItemAsync("User", userInfo);
            await authenticationStateProvider.GetAuthenticationStateAsync();

            navigationManager.NavigateTo("/");
        }
        else
        {
            message = result.Message;
            messageType = PlannerApp.Client.Models.AlertMessageType.Error;
        }
        isBusy = false;
    }
    void GoToRegister()
    {
        navigationManager.NavigateTo("/auth/register");
    }
}
